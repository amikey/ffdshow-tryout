0.1.9
Peter S. Mazinger:	wchar cleanups across the board
-	Make sure that operator= changes the number of elements in the vector.
-	Fix to string::pop_back function scope
-	reverse_iterator copying fixed
-	Have max string length test aginst proper variable (oops)
-	Change sstream to use append instead of push_back all of the time
-	Make string::append start reading at the correct location
-	Convert sstream to allow seeking on write stream without truncation
-	Convert sstream xsputn to use either append or replace
-	Elliminate duplicate size_t definition - now use C library version
-	Make sure string assign(size_type n, Ch c) clears the string before resizing
-	Fix string insert functions to move the correct amount of data
-	Reimplemented cstring, cassert, cerrno, cstdlib


0.1.8
-	Fixed problem in <map> which returned this instead of *this for operator=
-	Fixed an problem using . instead of ->  Oops.
-	Added string find, rfind, find_first_of and find_last_of functions
-	Moved operator+(string, string) into library binary.
-	Added <iomanip> header.  Forgot that little thing.  Oops.
-	Fixed insert for vector<int>.  Technique shamelessly stolen from glibc++
-	fix problem in list which incorrectly handles pointers
-	Create native std::string::find(Ch) instead of calling through string constructor.
-	Fix of istream getline (only sets failbit if extracted 0 chars, not copied 0 chars)
-	Fix string::find so we can scan the last character in the string.
-	Fix map iterator overloading class definion
-	Fix map iterator returning value not reference
-	Change tests to check changes
-	Change ios::operator() to return 1 instead of this
-	Fix [i|o]stream to check open() return value
-	Change fstream open functions to use the proper bitwise operators
-	Change allocator functionality so that it works according to spec.
-	Conversion of STL to use allocator::construct/destroy
-	Make test suite nicer.


0.1.7 - 2004-12-23
-	Significant changes to the library
-	Converted a lot of forced instanteation from double definitions to ifdef tricks
-	Merged some of the helper functions into the main files
-	Split off i/ostream string code from core string header
-	Lots of little bugfixes done involving function definitions, etc.
-	Fixed a spec error in list code - erase now returns a pointer after deleted elements, not before
-	Fixed a spec error in streambuf - now call pbackfail instead of returning error.
-	Added more code to valarray - now supports slice_array - untested
-	Modified test suite (by popular demand).  Now the process can be automated
-	Added targets make tests and make test.  tests builds tests and test runs them


0.1.6 - 2004-11-30
-	Fixed problem with straembuf where a value was being returned instead of a pointer
-	Fixed a problem where a buffer was not flushed on close of an fstraem
-	Added basic test for fstream
-	Started working on better way to expand symbols in library

0.1.5 - 2004-09-26
-	Added code for all algorithms
-	Fixed map/set code to prevent infinite loops.  Oops.
-	Fixed list code to prevent most memory leaks.  1 still remains, but unknown location
-	stlport v 1.00 test suite now compiles, links and runs.  Some issues remain
-	Fix deque constructor using the wrong end_pointer value
-	Added erase capability to vector
-	Changed multimap::find to point to first matching element instead of any matching element
-	Added more tests to test suite based upon problems from stlport test suite
-	Altered istream_iterator template so that it handles begining of stream conditions properly
-	Fixed make_heap and sort_heap functions to sort in the correct order
-	Fixed a few pedantic errors in std::string as it relates to the vector base
-	All (known) stlport issues have been resolved.  Compiles and runs properly.


0.1.4 - 2004-09-10
-	Fixed minor previous errors
-	Added <algorithm> heap functions.  Just treat as a descending sorted list
-	Added more code to <valarray>
-	Added <, <=, >, >= comparisons to deque iterators (don't know why I missed them in the first place)
-	Making Makefiles a little bit better.

0.1.3 - 2004-09-06
-	Compiles with gcc 3.4, thus it is far more "correct" than previously
-	Started adding code for valarray


0.1.2 - 2004-09-05
-	Completed all core code for set, multiset, map and multimap.  Rewrote to use inheritance to cut code duplication
-	Added more algorithms
-	Now compiles the stlport 1.0 testsuite (some minor changes to not test extensions needed)
-	Does not yet link stlport testsuite - missing implementations of a number of functions
-	Added sort algorithm - using a bubble sort for now.
-	sort_stable will likely remain bubble sort for some time (It is both stable and in-place)
-	sort will likely be converted to a heap sort eventually (It is in-place, but non-stable)
-	List sort is a bubble sort.  Might change later (insertion sort?), but it is difficult to work with list limitations
-	Split iterator code into two sections to cut down on dependency hell
-	Compiles ncurses c++ library and test application


0.1.1 - 2004-09-01

-	Removed semicolons on the closing of namespaces.  My compiler doesn't warn, so I may have missed one or two
-       Fixed a problem with the istream code which caused it to fail to read in the first character of input.
-       Changed compiler flags to not generate some warnings on >=GCC 3.4
-       Changed build process to prevent misconfiguration under certain circumstances
-       Added stringstream and all of it's incarnations
-       Added <bitset>
-       Added <set> - code is considered 'under development' - not finished


0.1.0 - 2004-08-28
-	Nearly done all algorithms
-	Added some SGI extensions
-	Completed numerics libraries
-	Only multimap has yet to be started of containers
-	Lots of bug fixes
-	Coompiles all of the stlport C++ STL tests up to mmap1.cpp (no multimap)
