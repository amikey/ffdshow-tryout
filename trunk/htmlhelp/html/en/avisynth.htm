<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<!-- In sync with revision 1194. -->

<head>
    <title>ffdshow tryouts | AviSynth filter</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
    <meta name="description" content="ffdshow tryouts AviSynth filter" />
    <link rel="stylesheet" href="../styles/style.css" type="text/css" />
    <link rel="shortcut icon" type="image/x-icon" href="../images/favicon.ico" />
</head>

<body>
  <a href="http://ffdshow-tryout.sourceforge.net/phpBB2/">
    <img src="../images/logo_phpBB.png" title="ffdshow tryouts" alt="ffdshow tryouts" width="200" height="91" />
  </a>

  <div style="text-align:right" class="smallest_caption">
    Translation available in:
    <a class="nav" href="../jp/avisynth.htm"><img src="../images/japan.png" title="Japanese AviSynth doc" alt="Japanese AviSynth doc" width="27" height="17" />&nbsp;Japanese</a>
  </div>

  <h1 class="big_caption">
    <a name="top" id="top">AviSynth filter</a>
  </h1>

  <img src="images/avisynth.png" width="558" height="406" title="AviSynth filter dialog" alt="AviSynth filter dialog" />

  <p class="normal">
    This document is based on rev 1194 or later.
  </p>

  <h2 class="medium_caption"><a name="About_AviSynth">About AviSynth</a></h2>

  <p class="normal">
    Basically, AviSynth is a scripting language for building a chain of video filters, similar to what ffdshow's filter configuration allows. It is even more powerful (since it's meant for non-linear video editing), but it doesn't come with a GUI, and by itself it is not really suited to be used for filtering videos while watching them in a media player.
  </p>

  <p class="normal">
    ffdshow's AviSynth filter enables you to use most of AviSynth and it's filters in real-time when playing a video, but of course there are some limitations that will be described further down this page (see "<a class="links" href="#Compatibility">Compatibility</a>").
  </p>

  <h2 class="medium_caption"><a name="Prerequisites">Prerequisites</a></h2>

  <p class="normal">
    First of all, AviSynth needs to be installed. If you haven't done this yet, head over to the <a class="links" href="http://www.avisynth.org/">AviSynth homepage</a> or directly to the <a class="links" href="http://sourceforge.net/project/showfiles.php?group_id=57023&amp;package_id=72557">AviSynth 2.5 download page at SourceForge</a> and download the installer for the latest version.
  </p>

  <p class="normal">
    You'll probably also want to install some of the filters and scripts that are available - take a look into the documentation that gets installed with AviSynth, as it contains a comprehensive (but of course not complete) list and description of both internal and external filters and plugins. Another source of filters, scripts and general information on AviSynth is <a class="links" href="http://forum.doom9.org/forumdisplay.php?f=33">Doom9.org's AviSynth usage forum</a> as well as <a class="links" href="http://forum.doom9.org/forumdisplay.php?f=69">Doom9.org's AviSynth development forum</a>.
  </p>

  <h2 class="medium_caption"><a name="Configuration">Configuration</a></h2>

  <p class="normal">
    The configuration page for ffdshow's AviSynth filter mainly consists of one big textbox that is used to specify an AviSynth script that is applied to the video, and a few additional controls:
  </p>

  <h3 class="small_caption">
    <img src="../images/check.png" title="" alt="" width="13" height="13" /> Add ffdshow video source
  </h3>

  <p class="normal">
  When checked, a call to the internal "ffdshow_source" source filter that is used to get frames from ffdshow into AviSynth is automatically added at the very beginning of the AviSynth script you specify. If it's unchecked, you will have to add an "ffdshow_source()" call somewhere in your script yourself, or all you'll get will be blank frames and/or AviSynth error messages.
  </p>

  <h3 class="small_caption">3:2 pulldown</h3>

  <h4 class="smaller_caption">General info</h4>

  <p class="normal">
    Video that's meant to be watched on NTSC TVs (like DVDs) must run at 30 frames per second (FPS). But with theatrical movies, you normally only have 24 frames per second, so something needs to be done to get to 30 frames per second. The usual method for this is called "3:2 pulldown" or "telecine", which essentially adds a frame (or, to be more precise, two "half-frames" called fields) to every consecutive group of 4 frames, making up new frames by combining and duplicating fields of the original frames. When watched like that on a PC monitor, this usually leads to comb artifacts, but on a TV it just leads to a slight stutter (also known as judder).
  </p>

  <h4 class="smaller_caption">Ignore pulldown</h4>

  <p class="normal">
    This setting will ignore any and all interlace/field repeat flags on the video. Use this option if you want to keep the original timestamps and interlace flags; mainly when you don't add/drop frames in your AviSynth script or have 100% progressive material.
  </p>

  <p class="normal">
    Whether your video contains the interlace/field repeat flags mentioned here depends on your video, but they're usually found on DVDs and other MPEG2 material.
  </p>

  <h4 class="smaller_caption">Apply pulldown</h4>

  <p class="normal">
    If you want to process 24 FPS material with a script that adds or drops frames you need to use this option to recreate the 3:2 pulldown according to the video's interlace/field repeat flags. This will make sure AviSynth gets passed 30 frames per second with equally spaced timestamps (just like a TV would), as AviSynth doesn't support video with a variable or changing framerate. You'll probably want to use either a deinterlacing filter or (even better) an "inverse telecine" (IVTC) filter like TIVTC or Decomb to get back the original 24 frames per second.
  </p>

  <p class="normal">
    This will also help fix DVDs where the flags are bogus so that simply watching them on a PC without filtering is not an option due to excessive combing or jerky movement, and works best for hybrid (i.e. mixed) 24/30 FPS material. As this option only does something in the presence of interlace/field repeat flags you can keep it checked for material without such flags.
  </p>

  <h4 class="smaller_caption">Smooth timestamps</h4>

  <p class="normal">
    This option will smooth alternating frame durations (i.e. switching between 33 and 50ms with each frame for 24 FPS material from a DVD) by adjusting the duration of the current frame to the average duration of the current and last frame. This allows adding/dropping frames on hybrid material (with a bob filter, for instance) without the timestamps going crazy as the timestamp interpolation used by this filter needs evenly spaced timestamps. (Material that already has a constant frame duration will keep it, of course.)
  </p>

  <h3 class="small_caption">
    <img src="../images/check.png" title="" alt="" width="13" height="13" /> Input colorspaces
  </h3>

  <p class="normal">
    Since not all AviSynth filters used in a script might accept video in all of the listed colorspaces you can uncheck those colorspaces to tell ffdshow to make sure the video gets converted to one of the checked ones if neccessary. Of course, you can also just leave all four checked and do the conversion inside your script. It's best to keep colorspace conversions to a minimum, since they take some time and cost a bit of image quality.
  </p>

  <h3 class="small_caption">
    <img src="../images/check.png" title="" alt="" width="13" height="13" /> Buffer back/ahead
  </h3>

  <p class="normal">
    AviSynth is based on the assumption that every filter can request any frame it wants from the filter(s) preceeding it (i.e. random, non-linear access), but of course this doesn't really work in ffdshow where the upstream DirectShow filters and/or the player application dictate the current frame that will get decoded and filtered.
  </p>

  <p class="normal">
    To work around this somewhat, the ffdshow AviSynth filter allows the user to specify a number of frames to buffer ahead and a number of frames to keep in a back-history. As long as the AviSynth script only requests frames within that range it will work just fine. If a frame it requests isn't buffered, it will get the nearest buffered frame instead, but at least in the case of IVTC or deinterlacing filters this will lead to jerkiness.
  </p>

  <p class="normal">
    If you notice problems, most likely the number of buffers has to be adjusted. Turn on ffdshow's On-Screen Display (OSD) and check the "AviSynth info" OSD item to see the values that are currently needed, or click on the "Use Current" button to copy the neccessary values directly into the 2 number boxes.
  </p>

  <p class="normal">
    If, on the other hand, you want to disable buffering completely you can either set ahead and back to zero or simply uncheck the "Buffer back/ahead" checkbox.
  </p>

  <p class="normal">
    (Do note that it's often not obvious how many frames an AviSynth filter will request back or ahead, and that this can even change based on the video it gets fed, so some tweaking may be required until you find the optimum values <strong>for a given script</strong> - the optimum can and will be different for different scripts.)
  </p>

  <h3 class="small_caption">The script area</h3>

  <p class="normal">
    Below all the above controls is a big textbox that you need to fill with an AviSynth script, which you can load from or save to disc with the two buttons above it. To find out more about AviSynth scripts please consult the resources listed under <a class="links" href="#Prerequisites">Prerequisites</a>.
  </p>

  <p class="normal">
    Since writing longer scripts in the config dialog isn't very comfortable you can also write your script as a function, put it into an AVSI file (or import it by hand using Import()) and just call that function in ffdshow.
  </p>

  <h4 class="smaller_caption">Aspect ratio variables</h4>

  <p class="normal">
    The global variables ffdshow_dar_x and ffdshow_dar_y are set to the input video's display aspect ratio (i.e. 4 and 3 for 4:3 material) and can be assigned to to set a new aspect ratio for the output video. Note that some players like Media Player Classic will disregard the video's aspect ratio and ask the DVD navigator for the aspect ratio when playing DVDs, so setting an aspect ratio might yield strange results.
  </p>

  <h4 class="smaller_caption">Examples</h4>

  <p class="normal">
    A very simple AviSynth script to test if AviSynth is properly installed would simply be:
  </p>

  <pre style="border: 1px solid Gray; margin-left: 2ex; padding-left: 0.5ex;">
Info()</pre>

  <p class="normal">
    which overlays some basic data about the current frame on the video.
  </p>

  <p class="normal">
    Another example script that uses TIVTC for pulldown removal:
  </p>

  <pre style="border: 1px solid Gray; margin-left: 2ex; padding-left: 0.5ex;">
TFM(order=1,chroma=false)
TDecimate(mode=1,hybrid=1,conCycle=1,chroma=false)</pre>

  <p class="normal">
    (Be sure to check "Apply pulldown" and set the back and ahead buffers to 0 and 12, respectively - and make sure you have extracted TIVTC into AviSynth's plugins folder)
  </p>

  <p class="normal">
    The above script extended to resize 4:3 or 16:9 images into an 800x600 area, with 16:9 images being cropped a bit left and right:
  </p>

  <pre style="border: 1px solid Gray; margin-left: 2ex; padding-left: 0.5ex;">
function Resize_16_9(v)
{
  return v.LanczosResize(800,480,22,0,676,480).AddBorders(0,60,0,60)
}

function Resize_4_3(v)
{
  return v.LanczosResize(800,600)
}

TFM(order=1,chroma=false)
TDecimate(mode=1,hybrid=1,conCycle=1,chroma=false)

ar=float(ffdshow_dar_x)/float(ffdshow_dar_y)
diff=ar-1.5555

abs(abs(diff)-0.2222) > 0.05 ? last : \
(diff >= 0 \
? last.Resize_16_9 \
: last.Resize_4_3)

ffdshow_dar_x=4 ffdshow_dar_Y=3</pre>

  <h2 class="medium_caption"><a name="Compatibility">Compatibility</a></h2>

  <p class="normal">
    You should be able to use most AviSynth filters and plugins in ffdshow. What definitely won't work are things that reorder large parts of the video (like Trim and (Un-)AlignedSplice when applied to more than a few frames, or Reverse), and loading other videos probably isn't going to be of much use either. The same goes for filters and scripts that are simply too CPU-intensive, since the whole point of using AviSynth in ffdshow is to keep things running in real-time.
  </p>

  <p class="normal">
    If you accidentally change the number of frames the script returns only slightly (like adding a single frame at the end with FadeIn()) you'll probably get weird results when seeking, since instead of skipping ahead a bit the filter will always restart requesting frames at zero from AviSynth. To fix this, make sure you add/remove frames at "normal" ratios (with low numerator and denominator), like 5:4 or 1:2.
  </p>

  <p class="normal">
    You can also disable buffering and set "3:2 pulldown" to "Ignore pulldown" to get the old behaviour of earlier ffdshow versions back, which might be a bit more performant since it avoids copying frames to an intermediate buffer - but that will of course not work right with scripts that need more than just the current frame, like the TIVTC example above.
  </p>

  <div class="normal">    
    <a class="nav" href="#top">Top&nbsp;<img src="../images/arrow_up.png" width="12" height="9" alt="Top" /></a>    
  </div>

  <div style="padding-top:20px">
    <a href="http://sourceforge.net">
      <img src="http://sflogo.sourceforge.net/sflogo.php?group_id=173941&amp;type=2" width="125" height="37" alt="SourceForge.net Logo" />
    </a>
  </div>
</body>
</html>
